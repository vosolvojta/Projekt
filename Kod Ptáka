using UnityEngine;
using UnityEngine.SceneManagement;

public class Bird : MonoBehaviour
{
    private Vector3 _initialPosition;
    private bool _birdWasLaunched;
    private float _timeSittingAround;
    
    [SerializeField] private float _launchPower = 500; 

    private void Awake()
    {
    _initialPosition = transform.position;   
    }
    
    private void Update()
    {
        GetComponent<LineRenderer>().SetPosition(0, _initialPosition);       
        GetComponent<LineRenderer>().SetPosition(1, transform.position); 

        if (_birdWasLaunched &&
             GetComponent<Rigidbody2D>().velocity.magnitude <= 0.1)
        {
            _timeSittingAround += Time.deltaTime; 
        }   


        if (transform.position.y > 10 ||
             transform.position.y < -10 ||
             transform.position.x > 10 ||
             transform.position.x < -10 ||
             _timeSittingAround > 3)
        {
            string currentSceneName = SceneManager.GetActiveScene().name;
            SceneManager.LoadScene(currentSceneName);
        }             
    }
    
     
    private void OnMouseDown()
    {
        GetComponent<SpriteRenderer>().color = Color.red;
        GetComponent<LineRenderer>().enabled = true;
    }    
    private void OnMouseUp()
    {     
        GetComponent<SpriteRenderer>().color = Color.white;
        Vector2 directionToInitialPosition = _initialPosition - transform.position;
        GetComponent<Rigidbody2D>().AddForce(directionToInitialPosition * _launchPower);
        GetComponent<Rigidbody2D>().gravityScale = 1;
        _birdWasLaunched = true;
        GetComponent<LineRenderer>().enabled = false;
    }      
    private void OnMouseDrag()
    {      
        Vector3 newPosition = Camera.main.ScreenToWorldPoint(Input.mousePosition);   
        transform.position = new Vector3(newPosition.x, newPosition.y);
    }
}

POPIS:

Skript je připojen k hernímu objektu, který představuje ptáka ve hře.

Skript začíná definicí tří soukromých proměnných:

_initialPosition: vektor3 představující počáteční pozici ptáka.
_birdWasLaunched: boolean udávající, zda byl pták hráčem vypuštěn, či nikoli.
_timeSittingAround: proměnná float sledující, jak dlouho pták po vypuštění stál na místě.
K dispozici je také veřejná proměnná typu float s názvem _launchPower, kterou lze upravit v editoru Unity a která umožňuje vývojáři nastavit sílu, s jakou je pták vypouštěn.

Metoda Awake() slouží k nastavení proměnné _initialPosition na aktuální pozici ptáka při inicializaci skriptu.

Metoda Update() je volána každý snímek hry a provádí několik úkolů. Nejprve nastaví počáteční pozici řádkového vykreslovače na _initialPosition a koncovou pozici na aktuální pozici ptáka. Tím se vytvoří vizuální reprezentace trajektorie ptáka.

Poté metoda zkontroluje, zda byl pták vypuštěn (_birdWasLaunched je true) a zda je jeho rychlost velmi nízká (GetComponent<Rigidbody2D>().velocity.magnitude <= 0,1). Pokud jsou obě podmínky splněny, zvýší proměnnou _timeSittingAround.

Nakonec metoda zkontroluje, zda pták nezmizel z obrazovky nebo zda se nepohybuje déle než tři sekundy. Pokud je některá z těchto podmínek splněna, metoda zjistí název aktuální scény a znovu ji načte, čímž vlastně restartuje úroveň.

Skript také obsahuje tři vstupní metody pro zpracování vstupu myší:

OnMouseDown(): nastaví barvu ptačího spritu na červenou a zapne vykreslovač čar.
OnMouseUp(): nastaví barvu spritu ptáka zpět na bílou, vypočítá směr z aktuální pozice ptáka do jeho výchozí pozice, aplikuje sílu v tomto směru na tuhé tělo ptáka (čímž ho přiměje k pohybu), nastaví měřítko gravitace ptáka na 1, označí _birdWasLaunched jako true a vypne vykreslovač čar.
OnMouseDrag(): aktualizuje polohu ptáka na základě polohy kurzoru myši.
Celkově tento skript implementuje základní mechaniku pro hráče, který ve hře vypouští ptáka a ovládá jeho trajektorii. Skript také obsahuje základní logiku pro resetování úrovně, pokud pták zmizí z obrazovky nebo je příliš dlouho nehybný.
